version: '3.4'

x-cache-from:
  - &api-cache-from
    cache_from:
      - ${NGINX_IMAGE:-quay.io/api-platform/nginx}
      - ${PHP_IMAGE:-quay.io/api-platform/php}

x-networks: &networks
  networks:
    - familycooking

services:
  traefik:
    image: "traefik:v2.0.1"
    container_name: traefik_${PROJECT_NAME}
    command:
      - --providers.docker.network=${PROJECT_NAME}
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # On map la conf statique dans le conteneur
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      # On map la conf dynamique statique dans le conteneur
      - ./traefik/traefik.config.toml:/etc/traefik/traefik.config.toml:ro
      # On map les certificats dans le conteneur en prod preferer Letâ€™s Encrypt
      - ./traefik/certs:/etc/traefik/certs:ro
#      - ./acme.json:/acme.json
    <<: *networks

  client:
    build:
      context: ./client
    container_name: client_${PROJECT_NAME}
    volumes:
      - ./client:/usr/src/client:rw,cached
      - /usr/src/client/node_modules
    <<: *networks
    labels:
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      # The domains the service will respond to
      - traefik.http.routers.client.rule=Host(`client.${DOMAIN_NAME}`)
      - traefik.http.routers.clients.rule=Host(`client.${DOMAIN_NAME}`)
      # Allow request from the predefined entry points named "web" & "web-secure"
      - traefik.http.routers.client.entrypoints=web
      - traefik.http.routers.clients.entrypoints=web-secure
      - traefik.http.routers.clients.tls=true

  php:
    build:
      context: ./api
      target: api_platform_php
      <<: *api-cache-from
    image: ${PHP_IMAGE:-quay.io/api-platform/php}
    container_name: php_${PROJECT_NAME}
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    depends_on:
      - db
    environment:
      - APP_ENV=${APP_ENV}
      - TRUSTED_HOSTS=^((${SUBDOMAINS_LIST}\.)?${DOMAIN_NAME})$$
      - CORS_ALLOW_ORIGIN=^(${HTTP_OR_SSL}(${SUBDOMAINS_LIST}.)?${DOMAIN_NAME})$$
      - DATABASE_URL=postgres://${DATABASE_USER}:${DATABASE_PASS}@db/${DATABASE_NAME}
    volumes:
      - ./api:/srv/api:rw,cached
      - ./api/docker/php/conf.d/api-platform.dev.ini/:/usr/local/etc/php/conf.d/api-platform.ini
      # if you develop on Linux, you may use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw
    <<: *networks

  api:
    build:
      context: ./api
      target: api_platform_nginx
      <<: *api-cache-from
    container_name: api_${PROJECT_NAME}
    image: ${NGINX_IMAGE:-quay.io/api-platform/nginx}
    depends_on:
      - php
    volumes:
      - ./api/public:/srv/api/public:ro
    <<: *networks
    expose: 
      - "81"
    labels:
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      # The domains the service will respond to
      - traefik.http.routers.api.rule=Host(`api.${DOMAIN_NAME}`)
      - traefik.http.routers.apis.rule=Host(`api.${DOMAIN_NAME}`)
      # Allow request from the predefined entry points named "web" & "web-secure"
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.routers.apis.entrypoints=web-secure
      - traefik.http.routers.apis.tls=true
    
  db:
    image: postgres:12-alpine
    container_name: db_${PROJECT_NAME}
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_PASSWORD=${DATABASE_PASS}
      - POSTGRES_USER=${DATABASE_USER}
    volumes:
      - db-data:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./api/docker/db/data:/var/lib/postgresql/data:rw
#    ports:
#      - target: 5432
#        published: 5432
#        protocol: tcp
    <<: *networks
    ports:
      - "5432:5432"

  adminer:
    image: adminer
    container_name: adminer_${PROJECT_NAME}
    restart: always
    expose:
      - "8080"
#    ports:
#      - '8998:8080'
    depends_on:
      - db
    <<: *networks
    labels:
    # Explicitly tell Traefik to expose this container
    - traefik.enable=true
    # The domains the service will respond to
    - traefik.http.routers.adminer.rule=Host(`adminer.${DOMAIN_NAME}`)
    - traefik.http.routers.adminers.rule=Host(`adminer.${DOMAIN_NAME}`)
    # Allow request from the predefined entry points named "web" & "web-secure"
    - traefik.http.routers.adminer.entrypoints=web
    - traefik.http.routers.adminers.entrypoints=web-secure
    - traefik.http.routers.adminers.tls=true

#  vulcain:
#    image: dunglas/vulcain
#    environment:
#      - CERT_FILE=/certs/localhost.crt
#      - KEY_FILE=/certs/localhost.key
#      - UPSTREAM=http://api
#    depends_on:
#      - api
#      - dev-tls
#    volumes:
#      - dev-certs:/certs:ro
#    ports:
#      - target: 443
#        published: 8443
#        protocol: tcp


#  mercure:
#    image: dunglas/mercure
#    environment:
#      - ALLOW_ANONYMOUS=1
#      - CERT_FILE=/certs/localhost.crt
#      - CORS_ALLOWED_ORIGINS=*
#      - DEMO=1
#      - JWT_KEY=!ChangeMe!
#      - KEY_FILE=/certs/localhost.key
#      - PUBLISH_ALLOWED_ORIGINS=https://localhost:1337 # required for publishing from the demo page
#    depends_on:
#      - dev-tls
#    volumes:
#      - dev-certs:/certs:ro
#    ports:
#      - target: 443
#        published: 1337
#        protocol: tcp

#  admin:
#    build:
#      context: ./admin
#      target: api_platform_admin_development
#      cache_from:
#        - ${ADMIN_IMAGE:-quay.io/api-platform/admin}
#    image: ${ADMIN_IMAGE:-quay.io/api-platform/admin}
#    depends_on:
#      - dev-tls
#    volumes:
#      - ./admin:/usr/src/admin:rw,cached
#      - dev-certs:/usr/src/admin/node_modules/webpack-dev-server/ssl:ro
#    ports:
#      - target: 3000
#        published: 444
#        protocol: tcp

#  dev-tls:
#    build:
#      context: ./docker/dev-tls
#    volumes:
#      - dev-certs:/certs:rw
#    ports:
#      - target: 80
#        published: 80
#        protocol: tcp

volumes:
  db-data: {}
#  dev-certs: {}

networks:
  familycooking:
    external: true